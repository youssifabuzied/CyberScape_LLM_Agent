{
    "target": "DRONE",
    "phases": [
        {
            "target": "DRONE",
            "phase_number": 1,
            "state": "The drone is at its starting location (5.0, 5.0), altitude 10.0 meters, ready to begin scanning the field.",
            "phase_target": "Divide the 50x50 meter field into 25 non-overlapping 10x10 meter squares and systematically scan each square to identify the square containing the ball.",
            "inputs": [],
            "outputs": [
                "square_x_start (float)",
                "square_y_start (float)"
            ],
            "low_level_plan": [
                "Drone.move_to_point((5.0, 5.0, 10.0))",
                "Drone.scan_area()",
                "for i in range(5):",
                "    for j in range(5):",
                "        square_x_start = 10 * i",
                "        square_y_start = 10 * j",
                "        Drone.move_to_point((square_x_start + 5, square_y_start + 5, 10.0))",
                "        Drone.scan_area()",
                "        Drone.communicate_with_apm((square_x_start, square_y_start))"
            ]
        },
        {
            "target": "DRONE",
            "phase_number": 2,
            "state": "Given a coordinate (square_x_start (float), square_y_start (float)), the drone is hovering at altitude 10.0 meters over the designated 10x10 meter square.",
            "phase_target": "Scan the current 10x10 meter square for the ball using onboard camera. Determine a confidence score for the presence of the ball in the square.",
            "inputs": [
                "square_x_start (float)",
                "square_y_start (float)"
            ],
            "outputs": [
                "ball_confidence_score (float)"
            ],
            "low_level_plan": [
                "Drone.move_to_point((square_x_start + 5, square_y_start + 5, 10.0))",
                "Drone.detect_with_camera('ball')",
                "if Drone.detect_with_camera('ball'):",
                "    ball_confidence_score = 1.0",
                "else:",
                "    ball_confidence_score = 0.0"
            ]
        },
        {
            "target": "DRONE",
            "phase_number": 3,
            "state": "Given a ball_confidence_score (float), the drone has completed scanning one 10x10 meter square.",
            "phase_target": "Determine if the ball_confidence_score is above a threshold (e.g., 0.5). If yes, transmit the square coordinates to the robot dog. If not, move to the next 10x10 meter square according to a systematic scanning pattern (e.g., row-major order).",
            "inputs": [
                "ball_confidence_score (float)",
                "square_x_start (float)",
                "square_y_start (float)"
            ],
            "outputs": [
                "target_square_x_start (float)",
                "target_square_y_start (float)"
            ],
            "low_level_plan": [
                "if ball_confidence_score > 0.5:",
                "    Drone.communicate_with_apm((square_x_start, square_y_start))",
                "else:",
                "    continue to next square"
            ]
        },
        {
            "target": "DRONE",
            "phase_number": 4,
            "state": "The drone has identified the 10x10 meter square containing the ball (ball_confidence_score > 0.5). The drone is hovering at altitude 10.0 meters above the square.",
            "phase_target": "Refine the location of the ball within the 10x10 square. Divide the 10x10 meter square into 100 1x1 meter cells. Systematically scan each 1x1 meter cell to identify the cell containing the ball.",
            "inputs": [
                "target_square_x_start (float)",
                "target_square_y_start (float)"
            ],
            "outputs": [
                "ball_x (float)",
                "ball_y (float)"
            ],
            "low_level_plan": [
                "Drone.move_to_point((target_square_x_start + 5, target_square_y_start + 5, 10.0))",
                "for i in range(10):",
                "    for j in range(10):",
                "        Drone.move_to_point((target_square_x_start + i + 0.5, target_square_y_start + j + 0.5, 10.0))",
                "        Drone.detect_with_camera('ball')",
                "        if Drone.detect_with_camera('ball'):",
                "            ball_x = target_square_x_start + i + 0.5",
                "            ball_y = target_square_y_start + j + 0.5"
            ]
        },
        {
            "target": "DRONE",
            "phase_number": 5,
            "state": "Given the coordinate (ball_x (float), ball_y (float)), the drone has located the ball within a 1x1 meter cell. The drone is hovering at altitude 5.0 meters above the ball.",
            "phase_target": "Transmit the final ball coordinates to the robot dog.",
            "inputs": [
                "ball_x (float)",
                "ball_y (float)"
            ],
            "outputs": [
                "ball_x (float)",
                "ball_y (float)"
            ],
            "low_level_plan": [
                "Drone.move_to_point((ball_x, ball_y, 5.0))",
                "Drone.communicate_with_apm((ball_x, ball_y))"
            ]
        }
    ]
}